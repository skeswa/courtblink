// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos(in *jlexer.Lexer, out *GameSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			out.ID = string(in.String())
		case "2":
			easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.LiveGameStats)
		case "3":
			out.GameStartTime = int(in.Int())
		case "4":
			out.GameStartTimeTBD = bool(in.Bool())
		case "5":
			out.Finished = bool(in.Bool())
		case "6":
			out.NotStarted = bool(in.Bool())
		case "7":
			easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos2(in, &out.HomeTeamStatus)
		case "8":
			easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos2(in, &out.AwayTeamStatus)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos(out *jwriter.Writer, in GameSummary) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2\":")
	easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.LiveGameStats)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"3\":")
	out.Int(int(in.GameStartTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"4\":")
	out.Bool(bool(in.GameStartTimeTBD))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"5\":")
	out.Bool(bool(in.Finished))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"6\":")
	out.Bool(bool(in.NotStarted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"7\":")
	easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos2(out, in.HomeTeamStatus)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"8\":")
	easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos2(out, in.AwayTeamStatus)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos(l, v)
}
func easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos2(in *jlexer.Lexer, out *GameTeamStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			out.Wins = int(in.Int())
		case "2":
			out.Score = int(in.Int())
		case "3":
			out.Losses = int(in.Int())
		case "4":
			out.TeamID = string(in.String())
		case "5":
			out.TriCode = string(in.String())
		case "6":
			out.Name = string(in.String())
		case "7":
			out.City = string(in.String())
		case "8":
			out.SplashURL = string(in.String())
		case "9":
			out.SplashPrimaryColor = string(in.String())
		case "10":
			out.SplashSecondaryColor = string(in.String())
		case "11":
			(out.PointsLeader).UnmarshalEasyJSON(in)
		case "12":
			(out.AssistsLeader).UnmarshalEasyJSON(in)
		case "13":
			(out.ReboundsLeader).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos2(out *jwriter.Writer, in GameTeamStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1\":")
	out.Int(int(in.Wins))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2\":")
	out.Int(int(in.Score))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"3\":")
	out.Int(int(in.Losses))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"4\":")
	out.String(string(in.TeamID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"5\":")
	out.String(string(in.TriCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"6\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"7\":")
	out.String(string(in.City))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"8\":")
	out.String(string(in.SplashURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"9\":")
	out.String(string(in.SplashPrimaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"10\":")
	out.String(string(in.SplashSecondaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"11\":")
	(in.PointsLeader).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"12\":")
	(in.AssistsLeader).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"13\":")
	(in.ReboundsLeader).MarshalEasyJSON(out)
	out.RawByte('}')
}
func easyjson861ee97bDecodeGithubComSkeswaEnbiyayBackendDtos1(in *jlexer.Lexer, out *LiveGameStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			out.Period = int(in.Int())
		case "2":
			out.Channel = string(in.String())
		case "3":
			out.TimeRemaining = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson861ee97bEncodeGithubComSkeswaEnbiyayBackendDtos1(out *jwriter.Writer, in LiveGameStats) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1\":")
	out.Int(int(in.Period))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2\":")
	out.String(string(in.Channel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"3\":")
	out.String(string(in.TimeRemaining))
	out.RawByte('}')
}
