// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos(in *jlexer.Lexer, out *GameDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1.1":
			out.HomeTeamName = string(in.String())
		case "1.2":
			out.HomeTeamCity = string(in.String())
		case "1.3":
			out.HomeTeamSplashURL = string(in.String())
		case "1.4.1":
			out.HomeTeamSplashPrimaryColor = string(in.String())
		case "1.4.2":
			out.HomeTeamSplashSecondaryColor = string(in.String())
		case "1.5":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.HomeTeamPointsLeader)
		case "1.6":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.HomeTeamAssistsLeader)
		case "1.7":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.HomeTeamReboundsLeader)
		case "1.8":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.HomeTeamStealsLeader)
		case "1.9":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.HomeTeamBlocksLeader)
		case "2.1":
			out.AwayTeamName = string(in.String())
		case "2.2":
			out.AwayTeamCity = string(in.String())
		case "2.3":
			out.AwayTeamSplashURL = string(in.String())
		case "2.4.1":
			out.AwayTeamSplashPrimaryColor = string(in.String())
		case "2.4.2":
			out.AwayTeamSplashSecondaryColor = string(in.String())
		case "2.5":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.AwayTeamPointsLeader)
		case "2.6":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.AwayTeamAssistsLeader)
		case "2.7":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.AwayTeamReboundsLeader)
		case "2.8":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.AwayTeamStealsLeader)
		case "2.9":
			easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in, &out.AwayTeamBlocksLeader)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos(out *jwriter.Writer, in GameDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.1\":")
	out.String(string(in.HomeTeamName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.2\":")
	out.String(string(in.HomeTeamCity))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.3\":")
	out.String(string(in.HomeTeamSplashURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.4.1\":")
	out.String(string(in.HomeTeamSplashPrimaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.4.2\":")
	out.String(string(in.HomeTeamSplashSecondaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.5\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.HomeTeamPointsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.6\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.HomeTeamAssistsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.7\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.HomeTeamReboundsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.8\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.HomeTeamStealsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1.9\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.HomeTeamBlocksLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.1\":")
	out.String(string(in.AwayTeamName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.2\":")
	out.String(string(in.AwayTeamCity))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.3\":")
	out.String(string(in.AwayTeamSplashURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.4.1\":")
	out.String(string(in.AwayTeamSplashPrimaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.4.2\":")
	out.String(string(in.AwayTeamSplashSecondaryColor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.5\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.AwayTeamPointsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.6\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.AwayTeamAssistsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.7\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.AwayTeamReboundsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.8\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.AwayTeamStealsLeader)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2.9\":")
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out, in.AwayTeamBlocksLeader)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos(l, v)
}
func easyjsonAceadd55DecodeGithubComSkeswaEnbiyayBackendDtos1(in *jlexer.Lexer, out *GameLeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			out.ID = string(in.String())
		case "2":
			out.Name = string(in.String())
		case "3":
			out.StatValue = string(in.String())
		case "4":
			out.JerseyNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAceadd55EncodeGithubComSkeswaEnbiyayBackendDtos1(out *jwriter.Writer, in GameLeader) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"2\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"3\":")
	out.String(string(in.StatValue))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"4\":")
	out.String(string(in.JerseyNumber))
	out.RawByte('}')
}
