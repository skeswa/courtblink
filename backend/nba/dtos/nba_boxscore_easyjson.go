// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos(in *jlexer.Lexer, out *NBABoxScorePlayerSortKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = int(in.Int())
		case "pos":
			out.Pos = int(in.Int())
		case "points":
			out.Points = int(in.Int())
		case "min":
			out.Minutes = int(in.Int())
		case "fgm":
			out.FieldGoalsMade = int(in.Int())
		case "fga":
			out.FieldGoalsAttempted = int(in.Int())
		case "fgp":
			out.FieldGoalPercentage = int(in.Int())
		case "ftm":
			out.FreeThrowsMade = int(in.Int())
		case "fta":
			out.FreeThrowsAttempted = int(in.Int())
		case "ftp":
			out.FreeThrowPercentage = int(in.Int())
		case "tpm":
			out.ThreePointersMade = int(in.Int())
		case "tpa":
			out.ThreePointersAttempted = int(in.Int())
		case "tpp":
			out.ThreePointerPercentage = int(in.Int())
		case "offReb":
			out.OffensiveRebounds = int(in.Int())
		case "defReb":
			out.DefensiveRebounds = int(in.Int())
		case "totReb":
			out.TotalRebounds = int(in.Int())
		case "assists":
			out.Assists = int(in.Int())
		case "pFouls":
			out.PersonalFouls = int(in.Int())
		case "steals":
			out.Steals = int(in.Int())
		case "turnovers":
			out.Turnovers = int(in.Int())
		case "blocks":
			out.Blocks = int(in.Int())
		case "plusMinus":
			out.PlusMinus = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos(out *jwriter.Writer, in NBABoxScorePlayerSortKey) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.Int(int(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pos\":")
	out.Int(int(in.Pos))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"points\":")
	out.Int(int(in.Points))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"min\":")
	out.Int(int(in.Minutes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgm\":")
	out.Int(int(in.FieldGoalsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fga\":")
	out.Int(int(in.FieldGoalsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgp\":")
	out.Int(int(in.FieldGoalPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftm\":")
	out.Int(int(in.FreeThrowsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fta\":")
	out.Int(int(in.FreeThrowsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftp\":")
	out.Int(int(in.FreeThrowPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpm\":")
	out.Int(int(in.ThreePointersMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpa\":")
	out.Int(int(in.ThreePointersAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpp\":")
	out.Int(int(in.ThreePointerPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offReb\":")
	out.Int(int(in.OffensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"defReb\":")
	out.Int(int(in.DefensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"totReb\":")
	out.Int(int(in.TotalRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"assists\":")
	out.Int(int(in.Assists))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pFouls\":")
	out.Int(int(in.PersonalFouls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"steals\":")
	out.Int(int(in.Steals))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"turnovers\":")
	out.Int(int(in.Turnovers))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocks\":")
	out.Int(int(in.Blocks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"plusMinus\":")
	out.Int(int(in.PlusMinus))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScorePlayerSortKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScorePlayerSortKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScorePlayerSortKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScorePlayerSortKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(in *jlexer.Lexer, out *NBABoxScorePlayerStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "personId":
			out.PlayerID = string(in.String())
		case "teamId":
			out.TeamID = string(in.String())
		case "isOnCourt":
			out.IsOnCourt = bool(in.Bool())
		case "points":
			out.Points = string(in.String())
		case "fgm":
			out.FieldGoalsMade = string(in.String())
		case "fga":
			out.FieldGoalsAttempted = string(in.String())
		case "fgp":
			out.FieldGoalPercentage = string(in.String())
		case "ftm":
			out.FreeThrowsMade = string(in.String())
		case "fta":
			out.FreeThrowsAttempted = string(in.String())
		case "ftp":
			out.FreeThrowPercentage = string(in.String())
		case "tpm":
			out.ThreePointersMade = string(in.String())
		case "tpa":
			out.ThreePointersAttempted = string(in.String())
		case "tpp":
			out.ThreePointerPercentage = string(in.String())
		case "offReb":
			out.OffensiveRebounds = string(in.String())
		case "defReb":
			out.DefensiveRebounds = string(in.String())
		case "totReb":
			out.TotalRebounds = string(in.String())
		case "assists":
			out.Assists = string(in.String())
		case "pFouls":
			out.PersonalFouls = string(in.String())
		case "steals":
			out.Steals = string(in.String())
		case "turnovers":
			out.Turnovers = string(in.String())
		case "blocks":
			out.Blocks = string(in.String())
		case "plusMinus":
			out.PlusMinus = string(in.String())
		case "min":
			out.Minutes = string(in.String())
		case "dnp":
			out.DidNotPlay = string(in.String())
		case "sortKey":
			(out.SortKey).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(out *jwriter.Writer, in NBABoxScorePlayerStats) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"personId\":")
	out.String(string(in.PlayerID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.TeamID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isOnCourt\":")
	out.Bool(bool(in.IsOnCourt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"points\":")
	out.String(string(in.Points))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgm\":")
	out.String(string(in.FieldGoalsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fga\":")
	out.String(string(in.FieldGoalsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgp\":")
	out.String(string(in.FieldGoalPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftm\":")
	out.String(string(in.FreeThrowsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fta\":")
	out.String(string(in.FreeThrowsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftp\":")
	out.String(string(in.FreeThrowPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpm\":")
	out.String(string(in.ThreePointersMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpa\":")
	out.String(string(in.ThreePointersAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpp\":")
	out.String(string(in.ThreePointerPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offReb\":")
	out.String(string(in.OffensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"defReb\":")
	out.String(string(in.DefensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"totReb\":")
	out.String(string(in.TotalRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"assists\":")
	out.String(string(in.Assists))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pFouls\":")
	out.String(string(in.PersonalFouls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"steals\":")
	out.String(string(in.Steals))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"turnovers\":")
	out.String(string(in.Turnovers))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocks\":")
	out.String(string(in.Blocks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"plusMinus\":")
	out.String(string(in.PlusMinus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"min\":")
	out.String(string(in.Minutes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dnp\":")
	out.String(string(in.DidNotPlay))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sortKey\":")
	(in.SortKey).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScorePlayerStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScorePlayerStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScorePlayerStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScorePlayerStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(in *jlexer.Lexer, out *NBABoxScoreTeamLeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Players = make([]struct {
						ID string "json:\"personId\""
					}, 0, 4)
				} else {
					out.Players = []struct {
						ID string "json:\"personId\""
					}{}
				}
				for !in.IsDelim(']') {
					var v1 struct {
						ID string "json:\"personId\""
					}
					easyjsonDf4150e7Decode(in, &v1)
					out.Players = append(out.Players, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(out *jwriter.Writer, in NBABoxScoreTeamLeader) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.String(string(in.Value))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"players\":")
	if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Players {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7Encode(out, v3)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScoreTeamLeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScoreTeamLeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScoreTeamLeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScoreTeamLeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(l, v)
}
func easyjsonDf4150e7Decode(in *jlexer.Lexer, out *struct {
	ID string "json:\"personId\""
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "personId":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7Encode(out *jwriter.Writer, in struct {
	ID string "json:\"personId\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"personId\":")
	out.String(string(in.ID))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(in *jlexer.Lexer, out *NBABoxScoreTeamStatLeaders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "points":
			(out.PointsLeader).UnmarshalEasyJSON(in)
		case "assists":
			(out.AssistsLeader).UnmarshalEasyJSON(in)
		case "rebounds":
			(out.ReboundsLeader).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(out *jwriter.Writer, in NBABoxScoreTeamStatLeaders) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"points\":")
	(in.PointsLeader).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"assists\":")
	(in.AssistsLeader).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rebounds\":")
	(in.ReboundsLeader).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScoreTeamStatLeaders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScoreTeamStatLeaders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScoreTeamStatLeaders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScoreTeamStatLeaders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos4(in *jlexer.Lexer, out *NBABoxScoreTeamStatTotals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "points":
			out.Points = string(in.String())
		case "fgm":
			out.FieldGoalsMade = string(in.String())
		case "fga":
			out.FieldGoalsAttempted = string(in.String())
		case "fgp":
			out.FieldGoalPercentage = string(in.String())
		case "ftm":
			out.FreeThrowsMade = string(in.String())
		case "fta":
			out.FreeThrowsAttempted = string(in.String())
		case "ftp":
			out.FreeThrowPercentage = string(in.String())
		case "tpm":
			out.ThreePointersMade = string(in.String())
		case "tpa":
			out.ThreePointersAttempted = string(in.String())
		case "tpp":
			out.ThreePointerPercentage = string(in.String())
		case "offReb":
			out.OffensiveRebounds = string(in.String())
		case "defReb":
			out.DefensiveRebounds = string(in.String())
		case "totReb":
			out.TotalRebounds = string(in.String())
		case "assists":
			out.Assists = string(in.String())
		case "pFouls":
			out.PersonalFouls = string(in.String())
		case "steals":
			out.Steals = string(in.String())
		case "turnovers":
			out.Turnovers = string(in.String())
		case "blocks":
			out.Blocks = string(in.String())
		case "plusMinus":
			out.PlusMinus = string(in.String())
		case "min":
			out.Minutes = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos4(out *jwriter.Writer, in NBABoxScoreTeamStatTotals) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"points\":")
	out.String(string(in.Points))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgm\":")
	out.String(string(in.FieldGoalsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fga\":")
	out.String(string(in.FieldGoalsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fgp\":")
	out.String(string(in.FieldGoalPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftm\":")
	out.String(string(in.FreeThrowsMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fta\":")
	out.String(string(in.FreeThrowsAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftp\":")
	out.String(string(in.FreeThrowPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpm\":")
	out.String(string(in.ThreePointersMade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpa\":")
	out.String(string(in.ThreePointersAttempted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tpp\":")
	out.String(string(in.ThreePointerPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offReb\":")
	out.String(string(in.OffensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"defReb\":")
	out.String(string(in.DefensiveRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"totReb\":")
	out.String(string(in.TotalRebounds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"assists\":")
	out.String(string(in.Assists))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pFouls\":")
	out.String(string(in.PersonalFouls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"steals\":")
	out.String(string(in.Steals))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"turnovers\":")
	out.String(string(in.Turnovers))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blocks\":")
	out.String(string(in.Blocks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"plusMinus\":")
	out.String(string(in.PlusMinus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"min\":")
	out.String(string(in.Minutes))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScoreTeamStatTotals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScoreTeamStatTotals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScoreTeamStatTotals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScoreTeamStatTotals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos4(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos5(in *jlexer.Lexer, out *NBABoxScoreTeamStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fastBreakPoints":
			out.FastBreakPoints = string(in.String())
		case "pointsInPaint":
			out.PointsInPaint = string(in.String())
		case "biggestLead":
			out.BiggestLead = string(in.String())
		case "secondChancePoints":
			out.SecondChancePoints = string(in.String())
		case "pointsOffTurnovers":
			out.PointsOffTurnovers = string(in.String())
		case "longestRun":
			out.LongestRun = string(in.String())
		case "totals":
			(out.Totals).UnmarshalEasyJSON(in)
		case "leaders":
			(out.Leaders).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos5(out *jwriter.Writer, in NBABoxScoreTeamStats) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fastBreakPoints\":")
	out.String(string(in.FastBreakPoints))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pointsInPaint\":")
	out.String(string(in.PointsInPaint))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"biggestLead\":")
	out.String(string(in.BiggestLead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"secondChancePoints\":")
	out.String(string(in.SecondChancePoints))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pointsOffTurnovers\":")
	out.String(string(in.PointsOffTurnovers))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longestRun\":")
	out.String(string(in.LongestRun))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"totals\":")
	(in.Totals).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leaders\":")
	(in.Leaders).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScoreTeamStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScoreTeamStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScoreTeamStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScoreTeamStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos5(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos6(in *jlexer.Lexer, out *NBABoxScoreStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timesTied":
			out.TimesTied = string(in.String())
		case "leadChanges":
			out.LeadChanges = string(in.String())
		case "hTeam":
			(out.HomeTeamStats).UnmarshalEasyJSON(in)
		case "vTeam":
			(out.AwayTeamStats).UnmarshalEasyJSON(in)
		case "activePlayers":
			if in.IsNull() {
				in.Skip()
				out.ActivePlayers = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.ActivePlayers = make([]NBABoxScorePlayerStats, 0, 1)
				} else {
					out.ActivePlayers = []NBABoxScorePlayerStats{}
				}
				for !in.IsDelim(']') {
					var v4 NBABoxScorePlayerStats
					(v4).UnmarshalEasyJSON(in)
					out.ActivePlayers = append(out.ActivePlayers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos6(out *jwriter.Writer, in NBABoxScoreStats) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timesTied\":")
	out.String(string(in.TimesTied))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leadChanges\":")
	out.String(string(in.LeadChanges))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hTeam\":")
	(in.HomeTeamStats).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"vTeam\":")
	(in.AwayTeamStats).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"activePlayers\":")
	if in.ActivePlayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.ActivePlayers {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScoreStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScoreStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScoreStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScoreStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos6(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos7(in *jlexer.Lexer, out *NBABoxScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "basicGameData":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos8(in, &out.Game)
		case "stats":
			(out.Stats).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos7(out *jwriter.Writer, in NBABoxScore) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"basicGameData\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos8(out, in.Game)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stats\":")
	(in.Stats).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBABoxScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBABoxScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBABoxScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBABoxScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos7(l, v)
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos8(in *jlexer.Lexer, out *NBAGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gameId":
			out.ID = string(in.String())
		case "startTimeUTC":
			out.StartTime = string(in.String())
		case "isStartTimeTBD":
			out.IsStartTimeTBD = bool(in.Bool())
		case "gameDuration":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos9(in, &out.Duration)
		case "period":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos10(in, &out.Period)
		case "hTeam":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos11(in, &out.HomeTeam)
		case "vTeam":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos11(in, &out.AwayTeam)
		case "watch":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos12(in, &out.VideoMetadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos8(out *jwriter.Writer, in NBAGame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gameId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"startTimeUTC\":")
	out.String(string(in.StartTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isStartTimeTBD\":")
	out.Bool(bool(in.IsStartTimeTBD))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gameDuration\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos9(out, in.Duration)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"period\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos10(out, in.Period)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hTeam\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos11(out, in.HomeTeam)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"vTeam\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos11(out, in.AwayTeam)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"watch\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos12(out, in.VideoMetadata)
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos12(in *jlexer.Lexer, out *NBAGameVideoMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcast":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos13(in, &out.Broadcast)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos12(out *jwriter.Writer, in NBAGameVideoMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"broadcast\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos13(out, in.Broadcast)
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos13(in *jlexer.Lexer, out *NBAGameBroadcast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcasters":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos14(in, &out.Broadcasters)
		case "video":
			easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos15(in, &out.Details)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos13(out *jwriter.Writer, in NBAGameBroadcast) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"broadcasters\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos14(out, in.Broadcasters)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video\":")
	easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos15(out, in.Details)
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos15(in *jlexer.Lexer, out *NBAGameVideoDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "canPurchase":
			out.CanPurchase = bool(in.Bool())
		case "isLeaguePass":
			out.IsOnLeaguePass = bool(in.Bool())
		case "isTNTOT":
			out.IsOnTNT = bool(in.Bool())
		case "streams":
			if in.IsNull() {
				in.Skip()
				out.Streams = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Streams = make([]NBAGameStream, 0, 1)
				} else {
					out.Streams = []NBAGameStream{}
				}
				for !in.IsDelim(']') {
					var v7 NBAGameStream
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos16(in, &v7)
					out.Streams = append(out.Streams, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deepLink":
			if in.IsNull() {
				in.Skip()
				out.DeepLinks = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.DeepLinks = make([]NBAGameDeepLink, 0, 1)
				} else {
					out.DeepLinks = []NBAGameDeepLink{}
				}
				for !in.IsDelim(']') {
					var v8 NBAGameDeepLink
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos17(in, &v8)
					out.DeepLinks = append(out.DeepLinks, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos15(out *jwriter.Writer, in NBAGameVideoDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"canPurchase\":")
	out.Bool(bool(in.CanPurchase))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isLeaguePass\":")
	out.Bool(bool(in.IsOnLeaguePass))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isTNTOT\":")
	out.Bool(bool(in.IsOnTNT))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"streams\":")
	if in.Streams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v9, v10 := range in.Streams {
			if v9 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos16(out, v10)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"deepLink\":")
	if in.DeepLinks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in.DeepLinks {
			if v11 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos17(out, v12)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos17(in *jlexer.Lexer, out *NBAGameDeepLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iosApp":
			out.IOS = string(in.String())
		case "mobileApp":
			out.Mobile = string(in.String())
		case "androidApp":
			out.Android = string(in.String())
		case "desktopWeb":
			out.Desktop = string(in.String())
		case "broadcaster":
			out.Broadcaster = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos17(out *jwriter.Writer, in NBAGameDeepLink) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iosApp\":")
	out.String(string(in.IOS))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mobileApp\":")
	out.String(string(in.Mobile))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"androidApp\":")
	out.String(string(in.Android))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"desktopWeb\":")
	out.String(string(in.Desktop))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"broadcaster\":")
	out.String(string(in.Broadcaster))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos16(in *jlexer.Lexer, out *NBAGameStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "streamId":
			out.ID = string(in.String())
		case "streamType":
			out.Type = string(in.String())
		case "isOnAir":
			out.IsOnAir = bool(in.Bool())
		case "duration":
			out.Duration = int(in.Int())
		case "isArchiveAvailToWatch":
			out.ArchiveAvailable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos16(out *jwriter.Writer, in NBAGameStream) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"streamId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"streamType\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isOnAir\":")
	out.Bool(bool(in.IsOnAir))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"duration\":")
	out.Int(int(in.Duration))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isArchiveAvailToWatch\":")
	out.Bool(bool(in.ArchiveAvailable))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos14(in *jlexer.Lexer, out *NBAGameBroadcasters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "national":
			if in.IsNull() {
				in.Skip()
				out.National = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.National = make([]NBAGameBroadcaster, 0, 2)
				} else {
					out.National = []NBAGameBroadcaster{}
				}
				for !in.IsDelim(']') {
					var v13 NBAGameBroadcaster
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos18(in, &v13)
					out.National = append(out.National, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "canadian":
			if in.IsNull() {
				in.Skip()
				out.Canadian = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Canadian = make([]NBAGameBroadcaster, 0, 2)
				} else {
					out.Canadian = []NBAGameBroadcaster{}
				}
				for !in.IsDelim(']') {
					var v14 NBAGameBroadcaster
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos18(in, &v14)
					out.Canadian = append(out.Canadian, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hTeam":
			if in.IsNull() {
				in.Skip()
				out.LocalHome = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.LocalHome = make([]NBAGameBroadcaster, 0, 2)
				} else {
					out.LocalHome = []NBAGameBroadcaster{}
				}
				for !in.IsDelim(']') {
					var v15 NBAGameBroadcaster
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos18(in, &v15)
					out.LocalHome = append(out.LocalHome, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vTeam":
			if in.IsNull() {
				in.Skip()
				out.LocalAway = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.LocalAway = make([]NBAGameBroadcaster, 0, 2)
				} else {
					out.LocalAway = []NBAGameBroadcaster{}
				}
				for !in.IsDelim(']') {
					var v16 NBAGameBroadcaster
					easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos18(in, &v16)
					out.LocalAway = append(out.LocalAway, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos14(out *jwriter.Writer, in NBAGameBroadcasters) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"national\":")
	if in.National == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.National {
			if v17 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos18(out, v18)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"canadian\":")
	if in.Canadian == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v19, v20 := range in.Canadian {
			if v19 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos18(out, v20)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hTeam\":")
	if in.LocalHome == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v21, v22 := range in.LocalHome {
			if v21 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos18(out, v22)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"vTeam\":")
	if in.LocalAway == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.LocalAway {
			if v23 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos18(out, v24)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos18(in *jlexer.Lexer, out *NBAGameBroadcaster) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "longName":
			out.LongName = string(in.String())
		case "shortName":
			out.ShortName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos18(out *jwriter.Writer, in NBAGameBroadcaster) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longName\":")
	out.String(string(in.LongName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shortName\":")
	out.String(string(in.ShortName))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos11(in *jlexer.Lexer, out *NBATeam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "teamId":
			out.ID = string(in.String())
		case "win":
			out.Win = string(in.String())
		case "loss":
			out.Loss = string(in.String())
		case "score":
			out.Score = string(in.String())
		case "triCode":
			out.Tricode = string(in.String())
		case "seriesWin":
			out.SeriesWin = string(in.String())
		case "seriesLoss":
			out.SeriesLoss = string(in.String())
		case "linescore":
			if in.IsNull() {
				in.Skip()
				out.PeriodScores = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PeriodScores = make([]struct {
						Score string "json:\"score\""
					}, 0, 4)
				} else {
					out.PeriodScores = []struct {
						Score string "json:\"score\""
					}{}
				}
				for !in.IsDelim(']') {
					var v25 struct {
						Score string "json:\"score\""
					}
					easyjsonDf4150e7Decode1(in, &v25)
					out.PeriodScores = append(out.PeriodScores, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos11(out *jwriter.Writer, in NBATeam) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"win\":")
	out.String(string(in.Win))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"loss\":")
	out.String(string(in.Loss))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.String(string(in.Score))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"triCode\":")
	out.String(string(in.Tricode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seriesWin\":")
	out.String(string(in.SeriesWin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seriesLoss\":")
	out.String(string(in.SeriesLoss))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"linescore\":")
	if in.PeriodScores == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in.PeriodScores {
			if v26 > 0 {
				out.RawByte(',')
			}
			easyjsonDf4150e7Encode1(out, v27)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonDf4150e7Decode1(in *jlexer.Lexer, out *struct {
	Score string "json:\"score\""
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "score":
			out.Score = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7Encode1(out *jwriter.Writer, in struct {
	Score string "json:\"score\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.String(string(in.Score))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos10(in *jlexer.Lexer, out *NBAGamePeriod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "current":
			out.Current = int(in.Int())
		case "maxRegular":
			out.MaxRegular = int(in.Int())
		case "isHalftime":
			out.IsHalftime = bool(in.Bool())
		case "isEndOfPeriod":
			out.IsEndOfPeriod = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos10(out *jwriter.Writer, in NBAGamePeriod) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.Int(int(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current\":")
	out.Int(int(in.Current))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxRegular\":")
	out.Int(int(in.MaxRegular))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isHalftime\":")
	out.Bool(bool(in.IsHalftime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isEndOfPeriod\":")
	out.Bool(bool(in.IsEndOfPeriod))
	out.RawByte('}')
}
func easyjsonDf4150e7DecodeGithubComSkeswaEnbiyayBackendNbaDtos9(in *jlexer.Lexer, out *NBAGameDuration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hours":
			out.Hours = string(in.String())
		case "minute":
			out.Minute = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDf4150e7EncodeGithubComSkeswaEnbiyayBackendNbaDtos9(out *jwriter.Writer, in NBAGameDuration) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hours\":")
	out.String(string(in.Hours))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minute\":")
	out.String(string(in.Minute))
	out.RawByte('}')
}
