// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos(in *jlexer.Lexer, out *NBATeamDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "teamId":
			out.ID = string(in.String())
		case "city":
			out.City = string(in.String())
		case "tricode":
			out.TriCode = string(in.String())
		case "fullName":
			out.FullName = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "divName":
			out.Division = string(in.String())
		case "confName":
			out.Conference = string(in.String())
		case "altCityName":
			out.AltCityName = string(in.String())
		case "isNBAFranchise":
			out.IsNBAFranchise = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos(out *jwriter.Writer, in NBATeamDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"city\":")
	out.String(string(in.City))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tricode\":")
	out.String(string(in.TriCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fullName\":")
	out.String(string(in.FullName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nickname\":")
	out.String(string(in.Nickname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"divName\":")
	out.String(string(in.Division))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"confName\":")
	out.String(string(in.Conference))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"altCityName\":")
	out.String(string(in.AltCityName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isNBAFranchise\":")
	out.Bool(bool(in.IsNBAFranchise))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBATeamDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBATeamDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBATeamDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBATeamDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos(l, v)
}
func easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(in *jlexer.Lexer, out *NBALeagueTeams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "standard":
			if in.IsNull() {
				in.Skip()
				out.Teams = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Teams = make([]NBATeamDetails, 0, 1)
				} else {
					out.Teams = []NBATeamDetails{}
				}
				for !in.IsDelim(']') {
					var v1 NBATeamDetails
					(v1).UnmarshalEasyJSON(in)
					out.Teams = append(out.Teams, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(out *jwriter.Writer, in NBALeagueTeams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"standard\":")
	if in.Teams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Teams {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBALeagueTeams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBALeagueTeams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBALeagueTeams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBALeagueTeams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(l, v)
}
func easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(in *jlexer.Lexer, out *NBAAllTeams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "league":
			(out.LeagueTeams).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(out *jwriter.Writer, in NBAAllTeams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"league\":")
	(in.LeagueTeams).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBAAllTeams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBAAllTeams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2c6098b8EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBAAllTeams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBAAllTeams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2c6098b8DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(l, v)
}
