// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson98f2e723DecodeGithubComSkeswaEnbiyayBackendNbaDtos(in *jlexer.Lexer, out *NBATeam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "teamId":
			out.ID = string(in.String())
		case "win":
			out.Win = string(in.String())
		case "loss":
			out.Loss = string(in.String())
		case "score":
			out.Score = string(in.String())
		case "triCode":
			out.Tricode = string(in.String())
		case "seriesWin":
			out.SeriesWin = string(in.String())
		case "seriesLoss":
			out.SeriesLoss = string(in.String())
		case "linescore":
			if in.IsNull() {
				in.Skip()
				out.PeriodScores = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PeriodScores = make([]struct {
						Score string "json:\"score\""
					}, 0, 4)
				} else {
					out.PeriodScores = []struct {
						Score string "json:\"score\""
					}{}
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Score string "json:\"score\""
					}
					easyjson98f2e723Decode(in, &v1)
					out.PeriodScores = append(out.PeriodScores, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson98f2e723EncodeGithubComSkeswaEnbiyayBackendNbaDtos(out *jwriter.Writer, in NBATeam) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"win\":")
	out.String(string(in.Win))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"loss\":")
	out.String(string(in.Loss))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.String(string(in.Score))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"triCode\":")
	out.String(string(in.Tricode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seriesWin\":")
	out.String(string(in.SeriesWin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seriesLoss\":")
	out.String(string(in.SeriesLoss))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"linescore\":")
	if in.PeriodScores == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.PeriodScores {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson98f2e723Encode(out, v3)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBATeam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson98f2e723EncodeGithubComSkeswaEnbiyayBackendNbaDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBATeam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson98f2e723EncodeGithubComSkeswaEnbiyayBackendNbaDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBATeam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson98f2e723DecodeGithubComSkeswaEnbiyayBackendNbaDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBATeam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson98f2e723DecodeGithubComSkeswaEnbiyayBackendNbaDtos(l, v)
}
func easyjson98f2e723Decode(in *jlexer.Lexer, out *struct {
	Score string "json:\"score\""
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "score":
			out.Score = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson98f2e723Encode(out *jwriter.Writer, in struct {
	Score string "json:\"score\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.String(string(in.Score))
	out.RawByte('}')
}
