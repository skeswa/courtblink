// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package dtos

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos(in *jlexer.Lexer, out *NBAPlayerDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "personId":
			out.ID = string(in.String())
		case "teamId":
			out.TeamID = string(in.String())
		case "jersey":
			out.JerseyNumber = string(in.String())
		case "pos":
			out.Position = string(in.String())
		case "heightFeet":
			out.HeightFeet = string(in.String())
		case "heightInches":
			out.HeightInches = string(in.String())
		case "weightPounds":
			out.Weight = string(in.String())
		case "nbaDebutYear":
			out.DebutYear = string(in.String())
		case "yearsPro":
			out.YearsPro = string(in.String())
		case "collegeName":
			out.CollegeName = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "draft":
			easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(in, &out.DraftDetails)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos(out *jwriter.Writer, in NBAPlayerDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"firstName\":")
	out.String(string(in.FirstName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lastName\":")
	out.String(string(in.LastName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"personId\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.TeamID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"jersey\":")
	out.String(string(in.JerseyNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pos\":")
	out.String(string(in.Position))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"heightFeet\":")
	out.String(string(in.HeightFeet))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"heightInches\":")
	out.String(string(in.HeightInches))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"weightPounds\":")
	out.String(string(in.Weight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nbaDebutYear\":")
	out.String(string(in.DebutYear))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"yearsPro\":")
	out.String(string(in.YearsPro))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"collegeName\":")
	out.String(string(in.CollegeName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	out.String(string(in.Country))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"draft\":")
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(out, in.DraftDetails)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBAPlayerDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBAPlayerDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBAPlayerDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBAPlayerDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos(l, v)
}
func easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos1(in *jlexer.Lexer, out *NBAPlayerDraftDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "teamId":
			out.TeamID = string(in.String())
		case "pickNum":
			out.PickNumber = string(in.String())
		case "roundNum":
			out.RoundNumber = string(in.String())
		case "seasonYear":
			out.Year = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos1(out *jwriter.Writer, in NBAPlayerDraftDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"teamId\":")
	out.String(string(in.TeamID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pickNum\":")
	out.String(string(in.PickNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"roundNum\":")
	out.String(string(in.RoundNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seasonYear\":")
	out.String(string(in.Year))
	out.RawByte('}')
}
func easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(in *jlexer.Lexer, out *NBALeaguePlayers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "standard":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Players = make([]NBAPlayerDetails, 0, 1)
				} else {
					out.Players = []NBAPlayerDetails{}
				}
				for !in.IsDelim(']') {
					var v1 NBAPlayerDetails
					(v1).UnmarshalEasyJSON(in)
					out.Players = append(out.Players, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(out *jwriter.Writer, in NBALeaguePlayers) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"standard\":")
	if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Players {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBALeaguePlayers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBALeaguePlayers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBALeaguePlayers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBALeaguePlayers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos2(l, v)
}
func easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(in *jlexer.Lexer, out *NBAAllPlayers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "league":
			(out.LeaguePlayers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(out *jwriter.Writer, in NBAAllPlayers) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"league\":")
	(in.LeaguePlayers).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NBAAllPlayers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NBAAllPlayers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1df274c0EncodeGithubComSkeswaEnbiyayBackendNbaDtos3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NBAAllPlayers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NBAAllPlayers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1df274c0DecodeGithubComSkeswaEnbiyayBackendNbaDtos3(l, v)
}
